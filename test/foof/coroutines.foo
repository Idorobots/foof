(let ((coroutines (structure
                   (define *queue* (ref nil))
                   (define (queue-empty?)
                     (nil? (deref *queue*)))
                   (define (enqueue x)
                     (assign! *queue* (append (deref *queue*)
                                              (list x))))
                   (define (dequeue)
                     (let ((q (deref *queue*)))
                       (assign! *queue* (cdr q))
                       (car q)))
                   (define (fork proc)
                     (letcc k
                            (enqueue k)
                            (proc)))
                   (define (yield)
                     (letcc k
                            (enqueue k)
                            ((dequeue) nil)))
                   (define (join)
                     (unless (queue-empty?)
                       ((dequeue) nil))))))
  (define (do-stuff x)
    (lambda ()
      (display x) (newline)
      (coroutines.yield)
      (display x) (newline)
      (coroutines.yield)
      (display x) (newline)))
  (coroutines.fork (do-stuff "foo"))
  (coroutines.fork (do-stuff "bar"))
  (coroutines.join))
