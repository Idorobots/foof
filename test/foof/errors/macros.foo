(do
  (when)
  (when #f)
  (when cond body)
  (when cond foo bar baz)
  (unless)
  (unless #f)
  (unless cond body)
  (unless cond foo bar baz)
  (cond)
  (cond (condition clause))
  (cond (condition clause) (condition clause))
  (cond (condition clause) (else clause))
  (cond (else clause))
  (cond (condition foo bar baz) (else clause))
  (cond (condition foo bar baz) (else foo bar baz))
  (cond (else foo bar baz) (condition foo bar baz))
  (and)
  '(and)        ;; both
  (quote (and)) ;; OK
  (and 1)
  (and 1 2)
  (and 1 2 3 4 5)
  (or)
  (or 1)
  (or 1 2)
  (or 1 2 3 4 5)
  (let*)
  (let* ())
  (let* () foo)
  (let* ((foo bar)))
  (let* ((foo bar)) baz)
  (let* ((foo bar)) baz faz)
  (let* ((foo bar) (baz faz)) baz)
  (let* ((foo bar) (baz faz)) baz faz)
  (let* ((foo bar) baz) baz faz)
  (let* (foo bar) baz)
  (letcc)
  (letcc k)
  (letcc k body)
  (letcc k foo bar baz)
  (letcc () foo)
  (letcc (k) foo)
  (letcc ((k wut)) foo)
  (handle)
  (handle expr)
  (handle expr handler)
  (handle expr handler oops)
  (shift)
  (shift k)
  (shift k expr)
  (shift k foo bar baz)
  (shift () expr)
  (shift (k) expr)
  (shift ((k wut)) expr)
  (reset)
  (reset foo)
  (reset foo bar baz)
  (structure)
  (structure x y z)
  (structure (define foo x))
  (structure (define (foo x) x))
  (structure (define (foo x) x)
             (define (bar y) y))
  (structure (define (foo x) x)
             (define bar 23))
  (module)
  (module foo)
  (module (foo))
  (module ())
  (module (foo bar))
  (module (foo) x)
  (module (foo) x y z)
  (module (foo) (define foo x))
  (module (foo) (define (foo x) x))
  (module (foo)
    (define (foo x) x)
    (define (bar y) y))
  (module (foo)
    (define (foo x) x)
    (define bar 23)))
