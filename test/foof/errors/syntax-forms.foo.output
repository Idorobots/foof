../test/foof/errors/syntax-forms.foo(1,1): Bad `quote` syntax, expected exactly one expression to follow:
1 |(quote)
    ^~~~~~

../test/foof/errors/syntax-forms.foo(2,1): Bad `quasiquote` syntax, expected exactly one expression to follow:
2 |(quasiquote)
    ^~~~~~

../test/foof/errors/syntax-forms.foo(3,1): Bad `unquote` syntax, expected exactly one expression to follow:
3 |(unquote)
    ^~~~~~

../test/foof/errors/syntax-forms.foo(4,1): Bad `unquote-splicing` syntax, expected exactly one expression to follow:
4 |(unquote-splicing)
    ^~~~~~

../test/foof/errors/syntax-forms.foo(7,0): Misplaced `unquote`, expected to be enclosed within a `quasiquote`:
7 |(unquote 23)
   ^~~~~~

../test/foof/errors/syntax-forms.foo(8,0): Misplaced `unquote-splicing`, expected to be enclosed within a `quasiquote`:
8 |(unquote-splicing 23)
   ^~~~~~

../test/foof/errors/syntax-forms.foo(9,1): Bad `quote` syntax, expected exactly one expression to follow:
9 |(quote 23 5)
    ^~~~~~

../test/foof/errors/syntax-forms.foo(10,1): Bad `quasiquote` syntax, expected exactly one expression to follow:
10 |(quasiquote 1 2 3)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(11,1): Bad `unquote` syntax, expected exactly one expression to follow:
11 |(unquote 23 4)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(12,1): Bad `unquote-splicing` syntax, expected exactly one expression to follow:
12 |(unquote-splicing 1 2 3)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(13,12): Misplaced `unquote-splicing`, expected to be enclosed within a spliceable value:
13 |(quasiquote (unquote-splicing foo))
                ^~~~~~

../test/foof/errors/syntax-forms.foo(14,1): Bad `if` syntax, expected exactly three expressions - condition, then and else branches - to follow:
14 |(if)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(15,1): Bad `if` syntax, expected exactly three expressions - condition, then and else branches - to follow:
15 |(if 23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(16,1): Bad `if` syntax, expected exactly three expressions - condition, then and else branches - to follow:
16 |(if 23 5)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(18,1): Bad `if` syntax, expected exactly three expressions - condition, then and else branches - to follow:
18 |(if 1 2 3 4 5)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(19,1): Bad `do` syntax, expected at least one expression to follow:
19 |(do)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(22,1): Bad `let` syntax, expected a list of bindings followed by a body:
22 |(let)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(23,1): Bad `let` syntax, expected a list of bindings followed by a body:
23 |(let x)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(24,1): Bad `let` syntax, expected a list of bindings followed by a body:
24 |(let ())
     ^~~~~~

../test/foof/errors/syntax-forms.foo(26,1): Bad `let` syntax, expected a list of bindings followed by a body:
26 |(let x 23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(27,6): Bad `let` bindings syntax, expected a pair of an identifier and a value:
27 |(let (x) 23)
          ^~~~~~

../test/foof/errors/syntax-forms.foo(27,6): Undefined variable `x`:
27 |(let (x) 23)
          ^~~~~~

../test/foof/errors/syntax-forms.foo(28,7): Bad `let` bindings syntax, expected a symbol but got a number instead:
28 |(let ((23 x)) 23)
           ^~~~~~

../test/foof/errors/syntax-forms.foo(28,10): Undefined variable `x`:
28 |(let ((23 x)) 23)
              ^~~~~~

../test/foof/errors/syntax-forms.foo(29,6): Bad `let` bindings syntax, expected a pair of an identifier and a value:
29 |(let (()) 23)
          ^~~~~~

../test/foof/errors/syntax-forms.foo(31,13): Bad `let` bindings syntax, expected a pair of an identifier and a value:
31 |(let ((x 23) y) x)
                 ^~~~~~

../test/foof/errors/syntax-forms.foo(32,13): Bad `let` bindings syntax, expected a pair of an identifier and a value:
32 |(let ((x 23) y z) x)
                 ^~~~~~

../test/foof/errors/syntax-forms.foo(32,15): Bad `let` bindings syntax, expected a pair of an identifier and a value:
32 |(let ((x 23) y z) x)
                   ^~~~~~

../test/foof/errors/syntax-forms.foo(33,1): Bad `letrec` syntax, expected a list of bindings followed by a body:
33 |(letrec)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(34,1): Bad `letrec` syntax, expected a list of bindings followed by a body:
34 |(letrec x)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(35,1): Bad `letrec` syntax, expected a list of bindings followed by a body:
35 |(letrec ())
     ^~~~~~

../test/foof/errors/syntax-forms.foo(37,1): Bad `letrec` syntax, expected a list of bindings followed by a body:
37 |(letrec x 23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(38,9): Bad `letrec` bindings syntax, expected a pair of an identifier and a value:
38 |(letrec (x) 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(38,9): Undefined variable `x`:
38 |(letrec (x) 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(39,10): Bad `letrec` bindings syntax, expected a symbol but got a number instead:
39 |(letrec ((23 x)) 23)
              ^~~~~~

../test/foof/errors/syntax-forms.foo(39,13): Undefined variable `x`:
39 |(letrec ((23 x)) 23)
                 ^~~~~~

../test/foof/errors/syntax-forms.foo(40,9): Bad `letrec` bindings syntax, expected a pair of an identifier and a value:
40 |(letrec (()) 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(42,16): Bad `letrec` bindings syntax, expected a pair of an identifier and a value:
42 |(letrec ((x 23) y) x)
                    ^~~~~~

../test/foof/errors/syntax-forms.foo(43,16): Bad `letrec` bindings syntax, expected a pair of an identifier and a value:
43 |(letrec ((x 23) y z) x)
                    ^~~~~~

../test/foof/errors/syntax-forms.foo(43,18): Bad `letrec` bindings syntax, expected a pair of an identifier and a value:
43 |(letrec ((x 23) y z) x)
                      ^~~~~~

../test/foof/errors/syntax-forms.foo(44,1): Bad `lambda` syntax, expected a formal arguments specification followed by a body:
44 |(lambda)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(45,1): Bad `lambda` syntax, expected a formal arguments specification followed by a body:
45 |(lambda x)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(46,1): Bad `lambda` syntax, expected a formal arguments specification followed by a body:
46 |(lambda ())
     ^~~~~~

../test/foof/errors/syntax-forms.foo(47,8): Bad `lambda` formal arguments syntax, expected a list of identifiers:
47 |(lambda x 23)
            ^~~~~~

../test/foof/errors/syntax-forms.foo(50,9): Bad `lambda` formal arguments syntax, expected a symbol but got a list instead:
50 |(lambda ((x y)) 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(51,9): Bad `lambda` formal arguments syntax, expected a symbol but got a list instead:
51 |(lambda ((x) (y)) 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(51,13): Bad `lambda` formal arguments syntax, expected a symbol but got a list instead:
51 |(lambda ((x) (y)) 23)
                 ^~~~~~

../test/foof/errors/syntax-forms.foo(52,9): Bad `lambda` formal arguments syntax, expected a symbol but got a number instead:
52 |(lambda (23) 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(53,9): Bad `lambda` formal arguments syntax, expected a symbol but got a string instead:
53 |(lambda ("some arg I dunno might delete") 23)
             ^~~~~~

../test/foof/errors/syntax-forms.foo(54,1): Bad `define` syntax, expected either an identifier and an expression or a function signature and a body to follow:
54 |(define)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(55,1): Bad `define` syntax, expected either an identifier and an expression or a function signature and a body to follow:
55 |(define foo)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(56,8): Bad `define` syntax, expected a symbol but got a number instead:
56 |(define 23 foo)
            ^~~~~~

../test/foof/errors/syntax-forms.foo(58,8): Bad `define` syntax, expected a symbol but got a list instead:
58 |(define () 23)
            ^~~~~~

../test/foof/errors/syntax-forms.foo(61,1): Bad `define` syntax, expected either an identifier and an expression or a function signature and a body to follow:
61 |(define (bar))
     ^~~~~~

../test/foof/errors/syntax-forms.foo(62,13): Bad `define` function signature syntax, expected a symbol but got a number instead:
62 |(define (bar 23) 5)
                 ^~~~~~

../test/foof/errors/syntax-forms.foo(63,0): Bad call syntax, expected at least one expression within the call:
63 |()
    ^~~~~~

../test/foof/errors/syntax-forms.foo(66,1): Bad call syntax, expected an expression that evaluates to a procedure but got a number instead:
66 |(23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(67,2): Bad call syntax, expected an expression that evaluates to a procedure but got a number instead:
67 |((23))
      ^~~~~~

../test/foof/errors/syntax-forms.foo(69,1): Bad call syntax, expected an expression that evaluates to a procedure but got a def instead:
69 |((define (faz x) x) 23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(69,1): Bad `define` syntax, not allowed in this context:
69 |((define (faz x) x) 23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(72,1): Bad call syntax, expected an expression that evaluates to a procedure but got a string instead:
72 |("some function")
     ^~~~~~

../test/foof/errors/syntax-forms.foo(73,1): Bad call syntax, expected an expression that evaluates to a procedure but got a quote instead:
73 |('foo 23)
     ^~~~~~

../test/foof/errors/syntax-forms.foo(77,0): Misplaced `unquote`, expected to be enclosed within a `quasiquote`:
77 |,z
    ^~~~~~

../test/foof/errors/syntax-forms.foo(78,0): Misplaced `unquote-splicing`, expected to be enclosed within a `quasiquote`:
78 |,@wat
    ^~~~~~

../test/foof/errors/syntax-forms.foo(82,1): Misplaced `unquote-splicing`, expected to be enclosed within a spliceable value:
82 |`,@wat
     ^~~~~~

Compilation aborted due to 65 errors.
