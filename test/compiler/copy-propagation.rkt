#lang racket

;; Copy propagation tests.

(require "../testing.rkt")
(require "../../src/compiler/ast.rkt")
(require "../../src/compiler/substitute.rkt")
(require "../../src/compiler/passes/copy-propagation.rkt")
(require "../../src/compiler/utils/set.rkt")

(describe
 "copy-propagation"
 (it "should substitute copies"
     (check ((var gen-valid-symbol)
             (sym (gen-symbol-node var))
             (copy gen-valid-symbol-node)
             (node (gen-if-node gen-valid-symbol-node
                                sym
                                gen-valid-symbol-node)))
            (assert (copy-propagation (make-subs (list (cons var copy)))
                                      sym)
                    copy)
            (assert-ast (copy-propagation (make-subs (list (cons var copy)))
                                          node)
                        (if converted-cond
                            converted-then
                            converted-else)
                        (assert converted-cond (ast-if-condition node))
                        (assert converted-then copy)
                        (assert converted-else (ast-if-else node)))))

 (it "should preserve lambda-bound variables"
     (check ((var gen-valid-symbol)
             (arg1 (gen-symbol-node var))
             (copy gen-valid-symbol-node)
             (node1 (gen-with-fv-bv (gen-lambda-node (list arg1) arg1)
                                    (set var)
                                    (set var)))
             (other-var gen-valid-symbol)
             (arg2 (gen-symbol-node other-var))
             (node2 (gen-with-fv-bv (gen-lambda-node (list arg2) arg1)
                                    (set var)
                                    (set other-var))))
            (assert (copy-propagation (make-subs (list (cons var copy)))
                                      node1)
                    node1)
            (assert-ast (copy-propagation (make-subs (list (cons var copy)))
                                          node2)
                        (lambda _ converted-body)
                        (assert converted-body copy))))

 (it "should handle let bound copies"
     (check ((var1 gen-valid-symbol)
             (sym1 (gen-symbol-node var1))
             (copy gen-valid-symbol-node)
             (b1 (gen-binding-node sym1 gen-valid-lambda-node))
             (node (gen-with-fv-bv (gen-let-node (list b1) sym1)
                                   (set var1)
                                   (set var1))))
            (assert-ast (copy-propagation (make-subs '()) node)
                        (let (converted-binding)
                          converted-body)
                        (assert converted-binding b1)
                        (assert converted-body sym1)))
     (check ((var1 gen-valid-symbol)
             (sym1 (gen-symbol-node var1))
             (copy gen-valid-symbol-node)
             (b1 (gen-binding-node sym1 copy))
             (var2 gen-valid-symbol)
             (sym2 (gen-symbol-node var2))
             (val2 (gen-app-node sym1))
             (b2 (gen-binding-node sym2 val2))
             (node (gen-with-fv-bv (gen-let-node (list b1 b2) sym1)
                                   (set var1)
                                   (set var2 var1))))
            (assert-ast (copy-propagation (make-subs '()) node)
                        (let ((binding converted-sym2 converted-val2))
                          converted-body)
                        (assert converted-sym2 sym2)
                        (assert converted-val2 val2)
                        (assert converted-body copy)))
     (check ((var1 gen-valid-symbol)
             (sym1 (gen-symbol-node var1))
             (var2 gen-valid-symbol)
             (sym2 (gen-symbol-node var2))
             (var3 gen-valid-symbol)
             (sym3 (gen-symbol-node var3))
             (b1 (gen-binding-node sym1 sym2))
             (b2 (gen-binding-node sym3 sym1))
             (body (gen-with-fv-bv (gen-let-node (list b2) sym3)
                                   (set var1)
                                   (set var3)))
             (node (gen-with-fv-bv (gen-let-node (list b1) body)
                                   (set var2)
                                   (set var1))))
            (assert (copy-propagation (make-subs '()) node)
                    sym2))
     (check ((var1 gen-valid-symbol)
             (sym1 (gen-symbol-node var1))
             (var2 gen-valid-symbol)
             (sym2 (gen-symbol-node var2))
             (var3 gen-valid-symbol)
             (sym3 (gen-symbol-node var3))
             (b1 (gen-binding-node sym1 sym2))
             (b2 (gen-binding-node sym2 sym3))
             (body (gen-with-fv-bv (gen-let-node (list b2) sym1)
                                   (set var3)
                                   (set var2)))
             (node (gen-with-fv-bv (gen-let-node (list b1) body)
                                   (set var2)
                                   (set var1))))
            (assert (copy-propagation (make-subs '()) node)
                    sym2)))

 (it "should handle letrec bound copies"
     (check ((var1 gen-valid-symbol)
             (sym1 (gen-symbol-node var1))
             (copy gen-valid-symbol-node)
             (b1 (gen-binding-node sym1 gen-valid-lambda-node))
             (node (gen-with-fv-bv (gen-letrec-node (list b1) sym1)
                                   (set var1)
                                   (set var1))))
            (assert-ast (copy-propagation (make-subs '()) node)
                        (letrec (converted-binding)
                          converted-body)
                        (assert converted-binding b1)
                        (assert converted-body sym1)))
     (check ((var1 gen-valid-symbol)
             (sym1 (gen-symbol-node var1))
             (copy gen-valid-symbol-node)
             (b1 (gen-binding-node sym1 copy))
             (var2 gen-valid-symbol)
             (sym2 (gen-symbol-node var2))
             (val2 (gen-app-node sym1))
             (b2 (gen-binding-node sym2 val2))
             (node (gen-with-fv-bv (gen-letrec-node (list b1 b2) sym1)
                                   (set var1)
                                   (set var2 var1))))
            (assert-ast (copy-propagation (make-subs '()) node)
                        (letrec ((binding converted-sym2 (app converted-sym1)))
                          converted-body)
                        (assert converted-sym2 sym2)
                        (assert converted-sym1 copy)
                        (assert converted-body copy)))))
