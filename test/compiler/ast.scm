;; AST tests

;; application? can be used in front of simple expression predicates.
(assert (let ((expr 'foo))
          (cond ((string? expr) 'string)
                ((application? expr) 'app)
                ((symbol? expr) 'symbol)
                ((lambda? expr) 'lambda)))
        'symbol)

(assert (let ((expr '(foo bar)))
          (cond ((string? expr) 'string)
                ((application? expr) 'app)
                ((symbol? expr) 'symbol)
                ((lambda? expr) 'lambda)))
        'app)

(assert (let ((expr '(lambda (foo) bar)))
          (cond ((string? expr) 'string)
                ((application? expr) 'app)
                ((symbol? expr) 'symbol)
                ((lambda? expr) 'lambda)))
        'lambda)

;; application? doesn't trigger for syntax forms.
(let ((exprs (list '(lambda (x) x)
                   '(if a b c)
                   '(quote a)
                   '(define foo bar)
                   '(do a b c)
                   '(let ((a b)) c)
                   '(letrec ((a b)) c)
                   '(letcc k c)
                   '(set! foo bar)
                   '(reset foo)
                   '(shift k k)
                   '(handle e e)
                   '(raise e)
                   '(module (x) x)
                   '(structure a b c))))
  (assert (map (lambda (expr)
                 (cond ((application? expr) 'app)
                       ('else 'something-else)))
               exprs)
          (map (constantly 'something-else)
               exprs)))
