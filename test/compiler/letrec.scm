;; Letrec conversion tests.

(define (check-deref arg node result)
  (assert-ast result (app 'deref ,inserted-node)
              (assert inserted-node node))
  (assert (generated? result))
  (assert (get-free-vars result) (set 'deref arg))
  (assert (get-location result) (get-location node))
  (assert (generated? (ast-app-op result)))
  (assert (get-location (ast-app-op result)) (get-location node)))

(describe
 "derefy"
 (it "leaves unassigned free variables intact"
     (check ((node gen-ast-node))
            (assert (derefy '() node)
                    node))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (fun (gen-lambda-node (list node) node))
             (f (bound-vars (list arg) fun)))
            (assert (derefy (list arg) f)
                    f))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (value gen-ast-node)
             (binding (make-binding node value))
             (let-node (gen-let-node (list binding) node))
             (l (bound-vars (list arg) let-node)))
            (assert (derefy (list arg) l)
                    l))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (value gen-ast-node)
             (binding (make-binding node value))
             (let-node (gen-letrec-node (list binding) node))
             (l (bound-vars (list arg) let-node)))
            (assert (derefy (list arg) l)
                    l))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (binding (gen-binding node
                                   node))
             (let-node (gen-letrec-node (list binding) gen-simple-node))
             (l (bound-vars (set arg) let-node)))
            (assert (derefy (list arg) l)
                    l)))

 (it "replaces assigned free variables with derefs in simple cases"
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg)))
            (check-deref arg node (derefy (list arg) node)))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (op gen-valid-symbol-node)
             (app (gen-app-node op node)))
            (let ((result (derefy (list arg) app)))
              (assert-ast result (app ,operator ,deref)
                          (assert operator op)
                          (check-deref arg node deref))
              (assert (get-location result) (get-location app)))))

 (it "replaces assigned free variables with derefs in lambda"
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (fun (gen-lambda-node (gen-arg-list 2) node)))
            (let ((result (derefy (list arg) fun)))
              (assert-ast result (lambda _ ,body)
                          (check-deref arg node body))
              (assert (get-location result) (get-location fun)))))

 (it "replaces assigned free variables with derefs in let"
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (l (gen-let-node (gen-binding-list 2) node)))
            (let ((result (derefy (list arg) l)))
              (assert-ast result (let _ ,body)
                          (check-deref arg node body))
              (assert (get-location result) (get-location l))))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (binding (gen-binding (gen-symbol-node (gen-symbol 5)) node))
             (l (gen-let-node (list binding) gen-simple-node)))
            (let ((result (derefy (list arg) l)))
              (assert-ast result (let ((binding _ ,deref)) _)
                          (check-deref arg node deref))
              (assert (get-location result) (get-location l))))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (binding (gen-binding node node))
             (let-node (gen-let-node (list binding) gen-simple-node))
             (l (bound-vars (set arg) let-node)))
            (let ((result (derefy (list arg) l)))
              (assert-ast result (let ((binding ,var ,deref)) _)
                          (assert var node)
                          (check-deref arg node deref))
              (assert (get-location result) (get-location l)))))

 (it "replaces assigned free variables with derefs in letrec"
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (l (gen-letrec-node (gen-binding-list 2) node)))
            (let ((result (derefy (list arg) l)))
              (assert-ast result (letrec _ ,body)
                          (check-deref arg node body))
              (assert (get-location result) (get-location l))))
     (check ((arg (gen-symbol 5))
             (node (gen-symbol-node arg))
             (binding (gen-binding (gen-symbol-node (gen-symbol 5)) node))
             (l (gen-letrec-node (list binding) gen-simple-node)))
            (let ((result (derefy (list arg) l)))
              (assert-ast result (letrec ((binding _ ,deref)) _)
                          (check-deref arg node deref))
              (assert (get-location result) (get-location l))))))

(describe
 "ref-conversion"
 (it "creates fix operator forms"
     (assert (ref-conversion
              '(letrec ((foo (lambda () (foo)))) (foo)))
             '(fix ((foo (lambda () (foo))))
                   (foo)))
     (assert (ref-conversion
              '(letrec ((foo (lambda () (bar)))
                        (bar (lambda () (foo))))
                 (foo)))
             '(fix ((foo (lambda () (bar)))
                    (bar (lambda () (foo))))
                   (foo)))))
