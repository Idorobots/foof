(literate
 This example shows the Spartan ML Lisp dialect using Simple Universal
 Time implementation.

 Programms in Spartan ML are divided into modules, each of which
 implements a predefined protocol, so in order to get our SUT example
 going we need to define a suitable protocol and a module:

 ($ *
    $the-protocol
    $the-module)

 We'll call it the "time" protocol and make it declare two functions:
 - curr-time taking integer number of milliseconds and returnig a triple
   representing current SUT hours, minutes and seconds,
 - format that will format curr-time into a string.

 In each function declaration we provide its type and some unittests,
 just for the sake of it.

 ($ the-protocol
    (define-protocol time
      (declare (curr-time ms)
        (: (-> integer {integer integer integer}))
        (is (= (curr-time 0) {0 0 0})))
      (declare (format time)
        (: (-> {integer integer integer} string))
        (is (= (format {0 0 0}) "0:00:00"))
        (is (= (format (curr-time 1000)) "0:00:01")))))

 Now, we need to provide this protocol in a SUT implementation:

 ($ the-module
    (define-module (sut)
      (provide time)
      $imports
      $sut-implementation
      ))

 We'll look at required imports once we have a working implementation done.
 SUT is fairly simple, it divides a day into ten hours, 100 minutes each.
 Each SUT minute is divided into 100 seconds, which, of course are slightly
 longer than our "usual" seconds. (/ (* 10 100 100) (* 24 60 60)) times longer,
 in fact:

 ($ convert-ms-to-sut
    (* ms (/ 1 0.864)))

 So, our very short SUT implementation is as follows:

 ($ sut-implementation
    (define (curr-time ms)
      (let ((sut-ms $convert-ms-to-sut))
        {(modulo (/ sut-ms 1e7) / 10)
         (modulo (/ sut-ms 1e5) / 100)
         (modulo (/ sut-ms 1e3) / 100)}))
    (define (format {hours minutes seconds})
      $format-sut-string
      ))

 The only thing left is the formatting function. We could do something fancy
 and format times as "fraction-days" (for example, 0.50723 meaning 5 hours, 7
 minutes and 23 seconds of the 0th day), but we'll go for something standard instead:

 ($ format-sut-string
    (std.string/format "%d:%2d:%2d" [hours minutes seconds]))

 And lastly, the imports. We've only used std.string throughout the code, so
 that'll be our only import:

 ($ imports
    (require std.string))
 )
