;; AST utils

(load-once "compiler/ast/nodes.scm")

(load-once "compiler/errors.scm")

;; Walk

(define (walk-ast f expr)
  (let* ((mf (partial map f)))
    (case (get-type expr)
      ((number symbol string <location>)
       expr)
      ((if)
       (foldl (lambda (field acc)
                (ast-update acc field f))
              expr
              '(condition then else)))
      ((do body)
       (ast-update expr 'exprs mf))
      ((lambda)
       (ast-update (ast-update expr 'formals mf) 'body f))
      ((let letrec fix)
       (ast-update (ast-update expr 'body f) 'bindings mf))
      ((binding)
       (ast-update (ast-update expr 'var f) 'val f))
      ((quote quasiquote unquote unquote-splicing const)
       (ast-update expr 'value f))
      ((def)
       (ast-update (ast-update expr 'name f) 'value f))
      ((app)
       (ast-update (ast-update expr 'op f) 'args mf))
      ((primop-app)
       (ast-update expr 'args mf))
      ((list)
       (ast-update expr 'value mf))
      ((<error>)
       (ast-update expr 'expr f))
      (else (compiler-bug "Unexpected expression: " expr)))))

(define (map-ast pre post expr)
  (if (ast-node? expr)
      (let ((m (partial map-ast pre post)))
        (post (walk-ast m (pre expr))))
      (compiler-bug "Non-AST object passed to map-ast:" expr)))

(define (ast-size ast)
  (map-ast id
           (lambda (expr)
             (case (get-type expr)
               ((number symbol string list const quote quasiquote unquote unquote-splicing) 1)
               ((if) (+ (ast-if-condition expr)
                        (ast-if-then expr)
                        (ast-if-else expr)))
               ((do) (apply + (ast-do-exprs expr)))
               ((body) (apply + (ast-body-exprs expr)))
               ((lambda) (ast-lambda-body expr))
               ((let) (foldl +
                             (ast-let-body expr)
                             (ast-let-bindings expr)))
               ((letrec) (foldl +
                                (ast-letrec-body expr)
                                (ast-letrec-bindings expr)))
               ((fix) (foldl +
                             (ast-fix-body expr)
                             (ast-fix-bindings expr)))
               ((binding) (ast-binding-val expr))
               ((app) (foldl +
                             (ast-app-op expr)
                             (ast-app-args expr)))
               ((primop-app) (apply + (ast-app-args expr)))
               ((def) (ast-def-value expr))
               (else 0)))
           ast))

(define (ast->plain ast)
  (map-ast id
           (lambda (expr)
             (case (get-type expr)
               ((number symbol string list) (ast-get expr 'value))
               ((if) (list 'if
                           (ast-if-condition expr)
                           (ast-if-then expr)
                           (ast-if-else expr)))
               ((do) (cons 'do (ast-do-exprs expr)))
               ((body) (cons 'do (ast-body-exprs expr)))
               ((lambda) (list 'lambda (ast-lambda-formals expr) (ast-lambda-body expr)))
               ((let) (list 'let (ast-let-bindings expr)
                            (ast-let-body expr)))
               ((letrec) (list 'letrec (ast-letrec-bindings expr)
                               (ast-letrec-body expr)))
               ((fix) (list 'fix (ast-fix-bindings expr)
                            (ast-fix-body expr)))
               ((binding) (list (ast-binding-var expr)
                                (ast-binding-val expr)))
               ((quote) (list 'quote (ast-quoted-expr expr)))
               ((const) (list 'quote (ast-const-value expr)))
               ((quasiquote) (list 'quasiquote (ast-quoted-expr expr)))
               ((unquote) (list 'unquote (ast-quoted-expr expr)))
               ((unquote-splicing) (list 'unquote-splicing (ast-quoted-expr expr)))
               ((def) (list 'define (ast-def-name expr) (ast-def-value expr)))
               ((app primop-app) (list* (ast-app-op expr) (ast-app-args expr)))
               (else (compiler-bug "Unexpected expression: " expr))))
           ast))
