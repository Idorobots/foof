;; AST utils

(load-once "compiler/ast/nodes.scm")

(load-once "compiler/errors.scm")

;; Walk

(define (walk-ast f expr)
  (case (ast-node-type expr)
    ((number symbol string <location>)
     expr)
    ((const)
     (set-ast-const-value expr (f (ast-const-value expr))))
    ((if)
     (-> expr
         (set-ast-if-condition (f (ast-if-condition expr)))
         (set-ast-if-then (f (ast-if-then expr)))
         (set-ast-if-else (f (ast-if-else expr)))))
    ((do)
     (set-ast-do-exprs expr (map f (ast-do-exprs expr))))
    ((body)
     (set-ast-body-exprs expr (map f (ast-body-exprs expr))))
    ((lambda)
     (-> expr
         (set-ast-lambda-formals (map f (ast-lambda-formals expr)))
         (set-ast-lambda-body (f (ast-lambda-body expr)))))
    ((let)
     (-> expr
         (set-ast-let-bindings (map f (ast-let-bindings expr)))
         (set-ast-let-body (f (ast-let-body expr)))))
    ((letrec)
     (-> expr
         (set-ast-letrec-bindings (map f (ast-letrec-bindings expr)))
         (set-ast-letrec-body (f (ast-letrec-body expr)))))
    ((fix)
     (-> expr
         (set-ast-fix-bindings (map f (ast-fix-bindings expr)))
         (set-ast-fix-body (f (ast-fix-body expr)))))
    ((binding)
     (-> expr
         (set-ast-binding-var (f (ast-binding-var expr)))
         (set-ast-binding-val (f (ast-binding-val expr)))))
    ((quote)
     (set-ast-quote-expr expr (f (ast-quote-expr expr))))
    ((quasiquote)
     (set-ast-quasiquote-expr expr (f (ast-quasiquote-expr expr))))
    ((unquote)
     (set-ast-unquote-expr expr (f (ast-unquote-expr expr))))
    ((unquote-splicing)
     (set-ast-unquote-splicing-expr expr (f (ast-unquote-splicing-expr expr))))
    ((def)
     (-> expr
         (set-ast-def-name (f (ast-def-name expr)))
         (set-ast-def-value (f (ast-def-value expr)))))
    ((app)
     (-> expr
         (set-ast-app-op (f (ast-app-op expr)))
         (set-ast-app-args (map f (ast-app-args expr)))))
    ((primop-app)
     (set-ast-primop-app-args expr (map f (ast-primop-app-args expr))))
    ((list)
     (set-ast-list-values expr (map f (ast-list-values expr))))
    ((<error>)
     (set-ast-error-expr expr (f (ast-error-expr expr))))
    (else (compiler-bug "Unexpected expression: " expr))))

(define (map-ast f expr)
  (if (ast-node? expr)
      (f (walk-ast (partial map-ast f) expr))
      (compiler-bug "Non-AST object passed to map-ast:" expr)))

(define (ast-size ast)
  (map-ast (lambda (expr)
             (case (ast-node-type expr)
               ((number symbol string list const quote quasiquote unquote unquote-splicing) 1)
               ((if) (+ (ast-if-condition expr)
                        (ast-if-then expr)
                        (ast-if-else expr)))
               ((do) (apply + (ast-do-exprs expr)))
               ((body) (apply + (ast-body-exprs expr)))
               ((lambda) (ast-lambda-body expr))
               ((let) (foldl +
                             (ast-let-body expr)
                             (ast-let-bindings expr)))
               ((letrec) (foldl +
                                (ast-letrec-body expr)
                                (ast-letrec-bindings expr)))
               ((fix) (foldl +
                             (ast-fix-body expr)
                             (ast-fix-bindings expr)))
               ((binding) (ast-binding-val expr))
               ((app) (foldl +
                             (ast-app-op expr)
                             (ast-app-args expr)))
               ((primop-app) (apply + (ast-app-args expr)))
               ((def) (ast-def-value expr))
               (else 0)))
           ast))

(define (ast->plain ast)
  (map-ast (lambda (expr)
             (case (ast-node-type expr)
               ((number symbol string list) (ast-get expr 'value))
               ((if) (list 'if
                           (ast-if-condition expr)
                           (ast-if-then expr)
                           (ast-if-else expr)))
               ((do) (cons 'do (ast-do-exprs expr)))
               ((body) (cons 'do (ast-body-exprs expr)))
               ((lambda) (list 'lambda (ast-lambda-formals expr) (ast-lambda-body expr)))
               ((let) (list 'let (ast-let-bindings expr)
                            (ast-let-body expr)))
               ((letrec) (list 'letrec (ast-letrec-bindings expr)
                               (ast-letrec-body expr)))
               ((fix) (list 'fix (ast-fix-bindings expr)
                            (ast-fix-body expr)))
               ((binding) (list (ast-binding-var expr)
                                (ast-binding-val expr)))
               ((const) (list 'quote (ast-const-value expr)))
               ((quote) (list 'quote (ast-quote-expr expr)))
               ((quasiquote) (list 'quasiquote (ast-quasiquote-expr expr)))
               ((unquote) (list 'unquote (ast-unquote-expr expr)))
               ((unquote-splicing) (list 'unquote-splicing (ast-unquote-splicing-expr expr)))
               ((def) (list 'define (ast-def-name expr) (ast-def-value expr)))
               ((app primop-app) (list* (ast-app-op expr) (ast-app-args expr)))
               (else (compiler-bug "Unexpected expression: " expr))))
           ast))
